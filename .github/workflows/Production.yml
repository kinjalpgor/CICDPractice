name: CICD Main

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    env:
      PROJECT_DIRECTORY_PATH: "CICDPractice"
      IIS_SERVER_COMPUTER_NAME: ${{ secrets.IIS_SERVER_COMPUTER_NAME }}
      IIS_WEBSITE_NAME: ${{ secrets.IIS_WEBSITE_NAME }}
      IIS_SERVER_USERNAME: ${{ secrets.IIS_SERVER_USERNAME }}
      IIS_SERVER_PASSWORD: ${{ secrets.IIS_SERVER_PASSWORD }}
      RECYCLE_APP_NAME: ${{ secrets.RECYCLE_APP_NAME }}
      WEBSITE_CONTENT_PATH: ${{ secrets.WEBSITE_CONTENT_PATH }}
      
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301
    
    - name: Dotnet restore packages
      run: dotnet restore
      
    - uses: actions/cache@v2
      with:
          path: | 
            ~/.nuget/packages
            !~/.nuget/packages/unwanted
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-    

    - name: Dotnet publish
      run: dotnet publish
           ${{ env.PROJECT_DIRECTORY_PATH }}/${{ env.PROJECT_DIRECTORY_PATH }}.csproj
           --source https://api.nuget.org/v3/index.json
           --configuration Release
            
  build_and_deploy:
     runs-on: windows-latest
     if: github.event_name == 'push'
     env:
      PROJECT_DIRECTORY_PATH: "CICDPractice"
      IIS_SERVER_COMPUTER_NAME: ${{ secrets.IIS_SERVER_COMPUTER_NAME }}
      IIS_WEBSITE_NAME: ${{ secrets.IIS_WEBSITE_NAME }}
      IIS_SERVER_USERNAME: ${{ secrets.IIS_SERVER_USERNAME }}
      IIS_SERVER_PASSWORD: ${{ secrets.IIS_SERVER_PASSWORD }}
      RECYCLE_APP_NAME: ${{ secrets.RECYCLE_APP_NAME }}
      WEBSITE_CONTENT_PATH: ${{ secrets.WEBSITE_CONTENT_PATH }} 
  
     steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.101

      - name: Dotnet restore packages
        run: dotnet restore
        
      - uses: actions/cache@v2
        with:
          path: | 
            ~/.nuget/packages
            !~/.nuget/packages/unwanted
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
            
      - name: Dotnet build
        run: dotnet build --configuration release --no-restore
      
      - name: Dotnet publish
        run: dotnet publish
           ${{ env.PROJECT_DIRECTORY_PATH }}/${{ env.PROJECT_DIRECTORY_PATH }}.csproj
           --source https://api.nuget.org/v3/index.json
           --configuration Release
            
      - name: Upload Build Publish Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Publish
          path: D:\a\CICDPractice\CICDPractice\CICDPractice\bin\Release\netcoreapp3.1\publish\
      
      - name: Build completed
        if: ${{ success() }}
        shell: cmd
        run: curl.exe -H "Content-Type:application/json" -d "{'text':'Build completed'}" ${{ secrets.TEAMS_WEBHOOK_URI }}
        
      - name: Deploy to production started
        if: ${{ success() }}
        shell: cmd
        run: curl.exe -H "Content-Type:application/json" -d "{'text':'Deploy to Production started'}" ${{ secrets.TEAMS_WEBHOOK_URI }}
    
      - name: Stop Application Pool
        shell: cmd
        run: '"C:/Program Files (x86)/IIS/Microsoft Web Deploy V3/msdeploy.exe" -verb:sync -allowUntrusted -source:recycleApp -dest:recycleApp="${{ env.RECYCLE_APP_NAME }}",recycleMode="StopAppPool",computerName="${{ env.IIS_SERVER_COMPUTER_NAME }}/msdeploy.axd?site=${{ env.IIS_WEBSITE_NAME }}",username="${{ env.IIS_SERVER_USERNAME }}",password="${{ env.IIS_SERVER_PASSWORD }}",AuthType="Basic"'
      - name: Deploy Application
        shell: cmd
        run: '"C:/Program Files (x86)/IIS/Microsoft Web Deploy V3/msdeploy.exe" -verb:sync -useCheckSum -allowUntrusted -source:contentPath="%CD%\${{ env.PROJECT_DIRECTORY_PATH }}\bin\Release\netcoreapp3.1\Publish\" -dest:contentPath="${{ env.WEBSITE_CONTENT_PATH }}",computerName="${{ env.IIS_SERVER_COMPUTER_NAME }}/msdeploy.axd?site=${{ env.IIS_WEBSITE_NAME }}",username="${{ env.IIS_SERVER_USERNAME }}",password="${{ env.IIS_SERVER_PASSWORD }}",authtype="Basic"'
      - name: Start Application Pool
        shell: cmd
        run: '"C:/Program Files (x86)/IIS/Microsoft Web Deploy V3/msdeploy.exe" -verb:sync -allowUntrusted -source:recycleApp -dest:recycleApp="${{ env.RECYCLE_APP_NAME }}",recycleMode="StartAppPool",computerName="${{ env.IIS_SERVER_COMPUTER_NAME }}/msdeploy.axd?site=${{ env.IIS_WEBSITE_NAME }}",username="${{ env.IIS_SERVER_USERNAME }}",password="${{ env.IIS_SERVER_PASSWORD }}",AuthType="Basic"' 

      - name: Deploy to production completed
        if: ${{ success() }}
        shell: cmd
        run: curl.exe -H "Content-Type:application/json" -d "{'text':'Deploy to production Azure VM Completed'}" ${{ secrets.TEAMS_WEBHOOK_URI }}
   
   # Deploy to Azure AppService
      - name: 'Run Azure webapp deploy action using publish profile credentials'
        uses: azure/webapps-deploy@v2
        with: 
          app-name: CICDPracticeApp 
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} # Define secret variable in repository settings as per action documentation
          package: D:\a\CICDPractice\CICDPractice\CICDPractice\bin\Release\netcoreapp3.1\publish\

      - name: Deploy completed
        if: ${{ success() }}
        shell: cmd
        run: curl.exe -H "Content-Type:application/json" -d "{'text':'Deploy completed to AppService'}" ${{ secrets.TEAMS_WEBHOOK_URI }}
      - name: Build and deploy failure
        if: ${{ failure() }}
        shell: cmd
        run: curl.exe -H "Content-Type:application/json" -d "{'text':'Build and deploy failed }" ${{ secrets.TEAMS_WEBHOOK_URI }}
